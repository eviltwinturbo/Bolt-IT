version: '3.9'

services:
  # PostgreSQL with pgvector extension
  postgres:
    image: pgvector/pgvector:pg15
    container_name: boltit-postgres
    environment:
      POSTGRES_DB: boltit
      POSTGRES_USER: boltit_admin
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U boltit_admin -d boltit"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - boltit-network
    logging:
      driver: "awslogs"
      options:
        awslogs-region: "${AWS_REGION:-us-east-1}"
        awslogs-group: "${CLOUDWATCH_LOG_GROUP_DB:-/aws/boltit/pilot/db}"
        awslogs-create-group: "true"

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: boltit-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - boltit-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Model sidecar service (embeddings, classification, similarity)
  model:
    image: ${ECR_MODEL_URI:-boltit-model:latest}
    container_name: boltit-model
    environment:
      MODEL_PATH: /models/current
      MODEL_VERSION: ${MODEL_VERSION:-v1.0.0}
      EMBEDDING_MODEL: sentence-transformers/all-MiniLM-L6-v2
      CLASSIFIER_PATH: /models/current/classifier.pkl
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      AWS_REGION: ${AWS_REGION:-us-east-1}
      S3_ARTIFACTS_BUCKET: ${S3_ARTIFACTS_BUCKET}
    volumes:
      - model_cache:/models
      - ./model_config.json:/app/config.json:ro
    ports:
      - "9001:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - boltit-network
    depends_on:
      postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 3G
        reservations:
          memory: 2G
    logging:
      driver: "awslogs"
      options:
        awslogs-region: "${AWS_REGION:-us-east-1}"
        awslogs-group: "${CLOUDWATCH_LOG_GROUP_MODEL:-/aws/boltit/pilot/model}"
        awslogs-create-group: "true"

  # API service (FastAPI)
  api:
    image: ${ECR_API_URI:-boltit-api:latest}
    container_name: boltit-api
    environment:
      DATABASE_URL: postgresql://boltit_admin:${DB_PASSWORD}@postgres:5432/boltit
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      MODEL_SERVICE_URL: http://model:9001
      SECRET_KEY: ${API_SECRET_KEY}
      ENVIRONMENT: ${ENVIRONMENT:-pilot}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      TOKEN_COSTS_PATH: /app/token_costs.json
      RULES_PRECEDENCE_PATH: /app/rules_precedence.json
      AWS_REGION: ${AWS_REGION:-us-east-1}
      S3_ARTIFACTS_BUCKET: ${S3_ARTIFACTS_BUCKET}
      ENABLE_METRICS: ${ENABLE_METRICS:-true}
      ENABLE_AUDIT_LOG: ${ENABLE_AUDIT_LOG:-true}
      AUTO_APPLY_ENABLED: ${AUTO_APPLY_ENABLED:-false}
      AUTO_APPLY_CONFIDENCE_THRESHOLD: ${AUTO_APPLY_CONFIDENCE_THRESHOLD:-0.92}
      AUTO_APPLY_SIMILARITY_THRESHOLD: ${AUTO_APPLY_SIMILARITY_THRESHOLD:-0.90}
    volumes:
      - ./token_costs.json:/app/token_costs.json:ro
      - ./rules_precedence.json:/app/rules_precedence.json:ro
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - boltit-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      model:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    logging:
      driver: "awslogs"
      options:
        awslogs-region: "${AWS_REGION:-us-east-1}"
        awslogs-group: "${CLOUDWATCH_LOG_GROUP_API:-/aws/boltit/pilot/api}"
        awslogs-create-group: "true"

  # Nginx reverse proxy (optional, for TLS termination and load balancing)
  nginx:
    image: nginx:alpine
    container_name: boltit-nginx
    volumes:
      - ./nginx/boltit.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    ports:
      - "80:80"
      - "443:443"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 15s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    networks:
      - boltit-network
    depends_on:
      - api
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Prometheus (optional, for metrics collection)
  prometheus:
    image: prom/prometheus:latest
    container_name: boltit-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - boltit-network
    profiles:
      - monitoring
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  boltit-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  model_cache:
    driver: local
  nginx_cache:
    driver: local
  prometheus_data:
    driver: local
