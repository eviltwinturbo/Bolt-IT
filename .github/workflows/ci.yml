name: Bolt IT CI/CD Pipeline

on:
  push:
    branches:
      - main
      - 'sprint/**'
      - 'feature/**'
  pull_request:
    branches:
      - main
      - 'sprint/**'

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
  ENVIRONMENT: pilot

permissions:
  contents: read
  packages: write
  id-token: write
  security-events: write

jobs:
  # =============================================================================
  # CODE QUALITY AND LINTING
  # =============================================================================
  lint:
    name: Lint and Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black isort pylint mypy
          pip install -r api/requirements.txt
          pip install -r model/requirements.txt
          pip install -r worker/requirements.txt

      - name: Run Black
        run: black --check api/ model/ worker/

      - name: Run isort
        run: isort --check api/ model/ worker/

      - name: Run pylint
        run: |
          pylint api/ model/ worker/ --exit-zero --score yes --reports yes > pylint-report.txt
          cat pylint-report.txt

      - name: Run mypy
        run: mypy api/ model/ worker/ --ignore-missing-imports || true

      - name: Upload lint results
        uses: actions/upload-artifact@v3
        with:
          name: lint-results
          path: pylint-report.txt

  # =============================================================================
  # UNIT TESTS
  # =============================================================================
  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-asyncio
          pip install -r api/requirements.txt
          pip install -r model/requirements.txt
          pip install -r worker/requirements.txt

      - name: Run API unit tests
        run: |
          pytest api/tests/unit/ -v --cov=api --cov-report=xml --cov-report=html

      - name: Run Model unit tests
        run: |
          pytest model/tests/unit/ -v --cov=model --cov-report=xml --cov-report=html

      - name: Run Worker unit tests
        run: |
          pytest worker/tests/unit/ -v --cov=worker --cov-report=xml --cov-report=html

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: htmlcov/

  # =============================================================================
  # SECURITY SCANNING
  # =============================================================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit

      - name: Run Safety (dependency vulnerability scan)
        run: |
          safety check --json > safety-report.json || true
          cat safety-report.json

      - name: Run Bandit (code security scan)
        run: |
          bandit -r api/ model/ worker/ -f json -o bandit-report.json || true
          cat bandit-report.json

      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        with:
          name: security-results
          path: |
            safety-report.json
            bandit-report.json

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD

  # =============================================================================
  # BUILD DOCKER IMAGES
  # =============================================================================
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [lint, test-unit, security-scan]
    strategy:
      matrix:
        service: [api, model, worker]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build ${{ matrix.service }} image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: false
          tags: boltit-${{ matrix.service }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: boltit-${{ matrix.service }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'
          category: 'trivy-${{ matrix.service }}'

      - name: Save image as artifact
        run: |
          docker save boltit-${{ matrix.service }}:${{ github.sha }} | gzip > boltit-${{ matrix.service }}.tar.gz

      - name: Upload image artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image-${{ matrix.service }}
          path: boltit-${{ matrix.service }}.tar.gz
          retention-days: 1

  # =============================================================================
  # INTEGRATION TESTS
  # =============================================================================
  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    services:
      postgres:
        image: pgvector/pgvector:pg15
        env:
          POSTGRES_DB: boltit_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio
          pip install -r api/requirements.txt
          pip install -r model/requirements.txt

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/boltit_test
          REDIS_URL: redis://localhost:6379/0
        run: |
          pytest api/tests/integration/ -v --tb=short

  # =============================================================================
  # PUSH TO ECR (only on main branch)
  # =============================================================================
  push-to-ecr:
    name: Push to ECR
    runs-on: ubuntu-latest
    needs: [build, test-integration]
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        service: [api, model, worker]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-boltit-deploy
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Download image artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image-${{ matrix.service }}

      - name: Load Docker image
        run: |
          docker load < boltit-${{ matrix.service }}.tar.gz

      - name: Tag and push image
        env:
          ECR_REPOSITORY: boltit-${{ matrix.service }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker tag boltit-${{ matrix.service }}:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag boltit-${{ matrix.service }}:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Output image URIs
        run: |
          echo "Image pushed: $ECR_REGISTRY/boltit-${{ matrix.service }}:${{ github.sha }}"
          echo "Image pushed: $ECR_REGISTRY/boltit-${{ matrix.service }}:latest"

  # =============================================================================
  # DEPLOY TO PILOT (manual approval required)
  # =============================================================================
  deploy-pilot:
    name: Deploy to Pilot
    runs-on: ubuntu-latest
    needs: push-to-ecr
    if: github.ref == 'refs/heads/main'
    environment:
      name: pilot
      url: https://api.boltit.example.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-boltit-deploy
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to EC2 via SSM
        run: |
          INSTANCE_ID="${{ secrets.PILOT_INSTANCE_ID }}"
          
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "cd /opt/boltit/deploy",
              "aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}",
              "docker compose pull",
              "docker compose up -d --remove-orphans",
              "sleep 10",
              "docker compose ps",
              "curl -f http://localhost:8000/health || exit 1"
            ]' \
            --output text \
            --query 'Command.CommandId')
          
          echo "SSM Command ID: $COMMAND_ID"
          
          # Wait for command to complete
          aws ssm wait command-executed \
            --command-id "$COMMAND_ID" \
            --instance-id "$INSTANCE_ID"
          
          # Get command status
          STATUS=$(aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id "$INSTANCE_ID" \
            --query 'Status' \
            --output text)
          
          echo "Deployment Status: $STATUS"
          
          if [ "$STATUS" != "Success" ]; then
            echo "Deployment failed!"
            aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id "$INSTANCE_ID"
            exit 1
          fi

      - name: Run smoke tests
        run: |
          sleep 30
          API_URL="${{ secrets.PILOT_API_URL }}"
          
          # Health check
          curl -f "$API_URL/health" || exit 1
          
          # API version check
          curl -f "$API_URL/v1/version" || exit 1
          
          echo "Smoke tests passed!"

      - name: Notify deployment success
        if: success()
        run: |
          echo "✅ Deployment to pilot successful!"
          echo "Deployed commit: ${{ github.sha }}"
          echo "API URL: ${{ secrets.PILOT_API_URL }}"

      - name: Rollback on failure
        if: failure()
        run: |
          echo "❌ Deployment failed! Rolling back..."
          
          INSTANCE_ID="${{ secrets.PILOT_INSTANCE_ID }}"
          
          aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "cd /opt/boltit/deploy",
              "docker compose down",
              "docker tag ${{ env.ECR_REGISTRY }}/boltit-api:previous ${{ env.ECR_REGISTRY }}/boltit-api:latest",
              "docker tag ${{ env.ECR_REGISTRY }}/boltit-model:previous ${{ env.ECR_REGISTRY }}/boltit-model:latest",
              "docker tag ${{ env.ECR_REGISTRY }}/boltit-worker:previous ${{ env.ECR_REGISTRY }}/boltit-worker:latest",
              "docker compose up -d"
            ]'

  # =============================================================================
  # NOTIFY
  # =============================================================================
  notify:
    name: Notify Build Status
    runs-on: ubuntu-latest
    needs: [lint, test-unit, security-scan, build, test-integration]
    if: always()
    steps:
      - name: Determine build status
        id: status
        run: |
          if [[ "${{ needs.lint.result }}" == "failure" ]] || \
             [[ "${{ needs.test-unit.result }}" == "failure" ]] || \
             [[ "${{ needs.security-scan.result }}" == "failure" ]] || \
             [[ "${{ needs.build.result }}" == "failure" ]] || \
             [[ "${{ needs.test-integration.result }}" == "failure" ]]; then
            echo "status=failure" >> $GITHUB_OUTPUT
          else
            echo "status=success" >> $GITHUB_OUTPUT
          fi

      - name: Send notification
        if: github.ref == 'refs/heads/main'
        run: |
          STATUS="${{ steps.status.outputs.status }}"
          if [ "$STATUS" == "success" ]; then
            echo "✅ Build successful for commit ${{ github.sha }}"
          else
            echo "❌ Build failed for commit ${{ github.sha }}"
          fi
